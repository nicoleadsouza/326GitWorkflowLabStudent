{"version":3,"sources":["scripts.js"],"names":["display","document","getElementById","appendToDisplay","value","clearDisplay","deleteLast","slice","calculateResult","eval","error","runSquareRoot","v","calculateSquareRoot","runSquare","calculateSquare","runReciprocal","calculateReciprocal","addEventListener","event","key","isNaN","includes","preventDefault","replace"],"mappings":";;AACA,IAAIA,OAAO,GAAGC,QAAQ,CAACC,cAAT,CAAwB,SAAxB,CAAd,C,CAEA;;AACA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAE5BJ,EAAAA,OAAO,CAACI,KAAR,IAAiBA,KAAjB;AACH,C,CAED;;;AACA,SAASC,YAAT,GAAwB;AAEpBL,EAAAA,OAAO,CAACI,KAAR,GAAgB,EAAhB;AACH,C,CAED;;;AACA,SAASE,UAAT,GAAsB;AAClBN,EAAAA,OAAO,CAACI,KAAR,GAAgBJ,OAAO,CAACI,KAAR,CAAcG,KAAd,CAAoB,CAApB,EAAuB,CAAC,CAAxB,CAAhB;AACH,C,CAED;;;AACA,SAASC,eAAT,GAA2B;AAEvB,MAAI;AACAR,IAAAA,OAAO,CAACI,KAAR,GAAgBK,IAAI,CAACT,OAAO,CAACI,KAAT,CAApB;AACH,GAFD,CAEE,OAAOM,KAAP,EAAc;AACZV,IAAAA,OAAO,CAACI,KAAR,GAAgB,OAAhB;AACH;AACJ;;AAED,SAASO,aAAT,GAAyB;AACrB,MAAMC,CAAC,GAAGC,mBAAmB,CAACb,OAAO,CAACI,KAAT,CAA7B;AACAJ,EAAAA,OAAO,CAACI,KAAR,GAAgBQ,CAAhB;AAEH;;AAED,SAASE,SAAT,GAAqB;AACjB;AACA,MAAMF,CAAC,GAAGG,eAAe,CAACf,OAAO,CAACI,KAAT,CAAzB;AACAJ,EAAAA,OAAO,CAACI,KAAR,GAAgBQ,CAAhB;AACH;;AAED,SAASI,aAAT,GAAyB;AACrB;AACA,MAAMJ,CAAC,GAAGK,mBAAmB,CAACjB,OAAO,CAACI,KAAT,CAA7B;AACAJ,EAAAA,OAAO,CAACI,KAAR,GAAgBQ,CAAhB;AACH,C,CAED;;;AACAX,QAAQ,CAACiB,gBAAT,CAA0B,SAA1B,EAAqC,UAASC,KAAT,EAAgB;AACjD,MAAMC,GAAG,GAAGD,KAAK,CAACC,GAAlB;;AACA,MAAI,CAACC,KAAK,CAACD,GAAD,CAAN,IAAe,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0BE,QAA1B,CAAmCF,GAAnC,CAAnB,EAA4D,CAC3D;;AAED,MAAIA,GAAG,KAAK,OAAZ,EAAqB;AACjBD,IAAAA,KAAK,CAACI,cAAN;AACAf,IAAAA,eAAe;AAClB;;AAED,MAAIY,GAAG,KAAK,WAAZ,EAAyB;AACrBd,IAAAA,UAAU;AACVa,IAAAA,KAAK,CAACI,cAAN;AACH;;AAED,MAAIH,GAAG,KAAK,QAAZ,EAAsB;AAClBf,IAAAA,YAAY;AACf;AACJ,CAlBD;AAoBAJ,QAAQ,CAACC,cAAT,CAAwB,SAAxB,EAAmCgB,gBAAnC,CAAoD,OAApD,EAA6D,UAASC,KAAT,EAAgB;AACzE,OAAKf,KAAL,GAAa,KAAKA,KAAL,CAAWoB,OAAX,CAAmB,eAAnB,EAAoC,EAApC,CAAb;AACH,CAFD","sourcesContent":["\r\nlet display = document.getElementById('display');\r\n\r\n// Append number or operator to the display\r\nfunction appendToDisplay(value) {\r\n\r\n    display.value += value;\r\n}\r\n\r\n// Clear the entire display\r\nfunction clearDisplay() {\r\n\r\n    display.value = '';\r\n}\r\n\r\n// Delete the last character from the display\r\nfunction deleteLast() {\r\n    display.value = display.value.slice(0, -1);\r\n}\r\n\r\n// Calculate and show the result\r\nfunction calculateResult() {\r\n\r\n    try {\r\n        display.value = eval(display.value);\r\n    } catch (error) {\r\n        display.value = 'Error';\r\n    }\r\n}\r\n\r\nfunction runSquareRoot() {\r\n    const v = calculateSquareRoot(display.value);\r\n    display.value = v;\r\n    \r\n}\r\n\r\nfunction runSquare() {\r\n    // Hint: Use exponentiation\r\n    const v = calculateSquare(display.value);\r\n    display.value = v;\r\n}\r\n\r\nfunction runReciprocal() {\r\n    // Hint: Reciprocal is 1/x\r\n    const v = calculateReciprocal(display.value);\r\n    display.value = v;\r\n}\r\n\r\n// TODO: Implement run your functions here\r\ndocument.addEventListener('keydown', function(event) {\r\n    const key = event.key;\r\n    if (!isNaN(key) || ['+', '-', '*', '/', '.'].includes(key)) {\r\n    }\r\n\r\n    if (key === 'Enter') {\r\n        event.preventDefault();  \r\n        calculateResult();\r\n    }\r\n    \r\n    if (key === 'Backspace') {\r\n        deleteLast();\r\n        event.preventDefault(); \r\n    }\r\n\r\n    if (key === 'Escape') {\r\n        clearDisplay();\r\n    }\r\n});\r\n\r\ndocument.getElementById('display').addEventListener('input', function(event) {\r\n    this.value = this.value.replace(/[^0-9+\\-*/.]/g, '');\r\n});\r\n\r\n\r\n"],"file":"scripts.dev.js"}